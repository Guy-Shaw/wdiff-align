#! /usr/bin/perl -w
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
        if 0; #$running_under_some_shell

# Filename: wdiff-align-series
# Brief: Horizontally align a series of changes, one line at a time
#
# Copyright (C) 2016 Guy Shaw
# Written by Guy Shaw <gshaw@acm.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

=pod

=begin description

Treat the lines of input as a series of chnages, from one line to the next.
For each pair of lines, run wdiff and show the resulting difference as
horizontally aligned defore and after pairs.


=end description

=cut

require 5.0;
use strict;
use warnings;
use Carp;
use diagnostics;
use Getopt::Long;
use File::Spec::Functions;
use Cwd qw(getcwd);             # Needed at least for explain_cwd()

my $eprint_fh;
my $dprint_fh;

my $debug   = 0;
my $verbose = 0;
my $trim    = 0;
my $ltrim   = 0;
my $rtrim   = 0;

my $path_wdiff_align;

my $standard_wdiff = 0;

my @options = (
    'debug'   => \$debug,
    'verbose' => \$verbose,
    'trim'    => \$trim,
    'ltrim'   => \$ltrim,
    'rtrim'   => \$rtrim,
);

#:subroutines:#

# Decide how to direct eprint*() and dprint*() functions.
# If STDOUT and STDERR are directed to the same "channel",
# then eprint*() and dprint*() should be tied to the same file handle.
#
# Otherwise, buffering could cause a mix of STDOUT and STDERR to
# be written out of order.
#
sub set_print_fh {
    my @stdout_statv;
    my @stderr_statv;
    my $stdout_chan;
    my $stderr_chan;

    @stdout_statv = stat(*STDOUT);
    @stderr_statv = stat(*STDERR);
    $stdout_chan = join(':', @stdout_statv[0, 1, 6]);
    $stderr_chan = join(':', @stderr_statv[0, 1, 6]);
    if (!defined($eprint_fh)) {
        $eprint_fh = ($stderr_chan eq $stdout_chan) ? *STDOUT : *STDERR;
    }
    if (!defined($dprint_fh)) {
        $dprint_fh = ($stderr_chan eq $stdout_chan) ? *STDOUT : *STDERR;
    }
}

sub eprint {
    if (-t $eprint_fh) {
        print {$eprint_fh} "\e[01;31m\e[K", @_, "\e[m\e[K";
    }
    else {
        print {$eprint_fh} @_;
    }
}

sub eprintf {
    if (-t $eprint_fh) {
        print  {$eprint_fh}  "\e[01;31m\e[K";
        printf {$eprint_fh} @_;
        print  {$eprint_fh}  "\e[m\e[K";
    }
    else {
        printf {$eprint_fh} @_;
    }
}

sub dprint {
    print {$dprint_fh} @_ if ($debug);
}

sub dprintf {
    printf {$dprint_fh} @_ if ($debug);
}

sub write_to_tmpfile {
    my $tmp_fname = shift;
    my $fh;

    if (!open($fh, '>', $tmp_fname)) {
        eprint "open('${tmp_fname}') failed; $!\n";
        exit 2;
    }

    for (@_) {
        print {$fh} $_, "\n";
    }
    close $fh;

    if (! -f $tmp_fname) {
        eprint "New temporary file, '${tmp_fname}', does not exist.\n";
        exit 2;
    }
}

sub word_encode_line {
    my ($line) = @_;
    my @ncode = ();
    my $pfx;
    my $lpfx;

    while ($line ne '') {
        if ($line =~ m{\A(\x20+)}msx) {
            $pfx = $1;
            $lpfx = length($pfx);
            push(@ncode, 'S' . $lpfx);
            $line = substr($line, $lpfx);
        }
        elsif ($line =~ m{\A(\w+)}msx) {
            $pfx = $1;
            $lpfx = length($pfx);
            push(@ncode, 'W' . $pfx);
            $line = substr($line, $lpfx);
        }
        else {
            $pfx = substr($line, 0, 1);
            $lpfx = length($pfx);
            push(@ncode, sprintf("%x", ord($pfx)));
            $line = substr($line, 1);
        }
    }

    return join(' ', @ncode);
}

sub word_decode_line {
    my ($line) = @_;
    my $dcode = '';
    $line =~ s{([\x1c-\x1f])}{\x20$1\x20}gmsx;
    for my $w (split(/\s+/, $line)) {
        next if ($w eq '');
        if ($w =~ m{\A[\x1c-\x1f]\z}msx) {
            $dcode .= $w;
        }
        elsif (substr($w, 0, 1) eq 'W') {
            $dcode .= substr($w, 1);
        }
        elsif ($w =~ m{\AS(\d+)\z}msx) {
            $dcode .= ' ' x $1;
        }
        elsif ($w =~ m{\A[\da-f][\da-f]?\z}msx) {
            $dcode .= chr(hex($w));
        }
        elsif ($w =~ m{\A[\dA-F][\dA-F]?\z}msx) {
            $dcode .= chr(hex($w));
        }
        elsif ($w eq 'ElideLeft') {
            $dcode .= '... ';
        }
        elsif ($w eq 'ElideRight') {
            $dcode .= ' ...';
        }
        else {
            $dcode .= sprintf('*** [%s] ***', $w);
        }
    }

    return $dcode;
}

sub ltrim_encoded_line {
    my ($line1, $line2) = @_;
    my @a1 = split(/\s+/, $line1);
    my @a2 = split(/\s+/, $line2);
    my @e1 = @a1;
    my @e2 = @a2;
    my $elide = 0;
    while ($e1[0] eq $e2[0]) {
        $elide += length($e1[0]);
        shift(@e1);
        shift(@e2);
    }
    if ($elide > 10) {
        unshift(@e1, 'ElideLeft');
        unshift(@e2, 'ElideLeft');
        @a1 = @e1;
        @a2 = @e2;
    }
    my $r1 = join(' ', @a1);
    my $r2 = join(' ', @a2);
    return ($r1, $r2);
}

sub rtrim_encoded_line {
    my ($line1, $line2) = @_;
    my @a1 = split(/\s+/, $line1);
    my @a2 = split(/\s+/, $line2);
    my @e1 = @a1;
    my @e2 = @a2;
    my $elide = 0;
    while ($e1[$#e1] eq $e2[$#e2]) {
        $elide += length($e1[0]);
        pop(@e1);
        pop(@e2);
    }
    if ($elide > 10) {
        push(@e1, 'ElideRight');
        push(@e2, 'ElideRight');
        @a1 = @e1;
        @a2 = @e2;
    }
    my $r1 = join(' ', @a1);
    my $r2 = join(' ', @a2);
    return ($r1, $r2);
}

#:options:#

set_print_fh();

GetOptions(@options) or exit 2;

if ($trim) {
    $ltrim = 1;
    $rtrim = 1;
}

#:main:#

my $tmpdir;
my $tmpf1;
my $tmpf2;
my $tmpf3;
my $tmpf4;

if ($debug) {
    if (-x './wdiff-align') {
        $path_wdiff_align = './wdiff-align';
    }
    elsif (-x '../wdiff-align') {
        $path_wdiff_align = '../wdiff-align';
    }
    else {
        $path_wdiff_align = 'wdiff-align';
    }

    $tmpdir = 'tmp';

    if (! -e $tmpdir) {
        mkdir($tmpdir);
    }

    $tmpf1 = catfile($tmpdir, '01-line1');
    $tmpf2 = catfile($tmpdir, '02-line2');
    $tmpf3 = catfile($tmpdir, '03-wdiff-hex');
    $tmpf4 = catfile($tmpdir, '04-wdiff-text');
}
else {
    $path_wdiff_align = 'wdiff-align';
    $tmpdir = '/var/tmp';
    my $tmp_pfx = catfile($tmpdir, 'wdiff-' . $$ . '-');
    $tmpf1 = $tmp_pfx . '01-line1';
    $tmpf2 = $tmp_pfx . '02-line2';
    $tmpf3 = $tmp_pfx . '03-wdiff-hex';
    $tmpf4 = $tmp_pfx . '04-wdiff-text';
}

my @wdiff_cmdv;

if ($standard_wdiff) {
    @wdiff_cmdv = (
        '/usr/bin/wdiff',
        $tmpf1,
        $tmpf2,
    );
}
else {
    @wdiff_cmdv = (
        '/usr/bin/wdiff',
        '--start-insert='  . "\x1c",
        '--end-insert='    . "\x1d",
        '--start-delete='  . "\x1e",
        '--end-delete='    . "\x1f",
        $tmpf1,
        $tmpf2,
    );
}

if (! -e $tmpdir) {
    eprint "Temporary directory, '${tmpdir}' does not exist.\n";
    exit 2;
}
if (! -d $tmpdir) {
    eprint "Temporary directory, '${tmpdir}' is not a directory.\n";
    system('ls', '-dlh', $tmpdir);
    exit 2;
}


my $prev_line = '';
my $ndiffs = 0;
while (<>) {
    chomp;
    s{\r\z}{}msx;
    my $line = word_encode_line($_);
    if ($prev_line ne '') {
        my $child;
        if ($ndiffs) {
            print "\n\n";
        }

        my $line1 = $prev_line;
        my $line2 = $line;
        if ($ltrim) {
            ($line1, $line2) = ltrim_encoded_line($line1, $line2);
        }
        if ($rtrim) {
            ($line1, $line2) = rtrim_encoded_line($line1, $line2);
        }
        write_to_tmpfile($tmpf1, $line1);
        write_to_tmpfile($tmpf2, $line2);
        my $wfh;
        my $wdiff_line;
        $child = open($wfh, '-|', @wdiff_cmdv);
        if ($child) {
            $wdiff_line = <$wfh>;
            chomp $wdiff_line;
            close $wfh;
        }

        if ($debug) {
            write_to_tmpfile($tmpf3, $wdiff_line);
        }

        $wdiff_line = word_decode_line($wdiff_line);

        if ($debug) {
            write_to_tmpfile($tmpf4, $wdiff_line);
        }

        my $afh;
        $child = open($afh, '|-', $path_wdiff_align, '--ctrl', '--midline');
        if ($child) {
            print {$afh}  $wdiff_line, "\n";
            close $afh;
        }
        ++$ndiffs;
    }
    $prev_line = $line;
}

unless ($debug) {
    unlink($tmpf1);
    unlink($tmpf2);
    unlink($tmpf3);
    unlink($tmpf4);
}

exit 0;
